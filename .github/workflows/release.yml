name: Release Python Package

on:
  push:
    branches:
      - main
    paths:
      - 'fastapi_profiler/**'
      - '!fastapi_profiler/rustcore/**'
  workflow_run:
    workflows: ["Build Rust Core"]
    types:
      - completed
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release)') && (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success')"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/exec @semantic-release/changelog conventional-changelog-conventionalcommits@7.0.2

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Generate release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release

      - name: Build and publish package
        if: ${{ success() }}
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry build
          poetry publish