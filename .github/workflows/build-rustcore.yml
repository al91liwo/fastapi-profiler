name: Build, Test and Publish Rust Core

on:
  push:
    branches: [main]
    paths:
      - 'fastapi_profiler/rustcore/**'
  workflow_dispatch:
  workflow_call: {}

permissions:
  contents: write
  id-token: write

jobs:
  build-rust:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install maturin
        run: pip install maturin

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} --out dist --interpreter python${{ matrix.python-version }}
          manylinux: manylinux2014
          working-directory: fastapi_profiler/rustcore

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: rust-wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: fastapi_profiler/rustcore/dist/*.whl
          retention-days: 7

  test:
    needs: build-rust
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pip install poetry==1.5.1

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: ./wheels
          merge-multiple: true

      - name: Install built wheel
        run: |
          pip install --find-links=./wheels fastapi-profiler-rust

      - name: Run tests
        run: |
          poetry config virtualenvs.create false
          poetry install --with dev --extras standard
          poetry run pytest

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          echo "Debug: Token length is ${#TWINE_PASSWORD}"
          
          # Create .pypirc with more explicit configuration
          mkdir -p ~/.config/pypi
          echo "[pypi]" > ~/.pypirc
          echo "repository = https://upload.pypi.org/legacy/" >> ~/.pypirc
          echo "username = __token__" >> ~/.pypirc
          echo "password = $TWINE_PASSWORD" >> ~/.pypirc
          
          chmod 600 ~/.pypirc
          
          # Verbose upload with explicit parameters
          python -m twine upload \
            --verbose \
            --repository-url https://upload.pypi.org/legacy/ \
            --username __token__ \
            --password "$TWINE_PASSWORD" \
            ./wheels/*.whl
          
          # Securely remove credentials
          shred -u ~/.pypirc
