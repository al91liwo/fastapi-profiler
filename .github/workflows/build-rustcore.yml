name: Build, Test and Publish Rust Core

on:
  workflow_call:
    outputs:
      rust_version:
        description: "The version of the Rust package that was published"
        value: ${{ jobs.determine-version.outputs.bumped_version }}
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      bumped_version: ${{ steps.maybe-bump-version.outputs.bumped_version }}
      should_publish: ${{ steps.check-pypi.outputs.should_publish }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Get current version
        id: get-version
        shell: bash
        run: |
          CURRENT_VERSION=$(grep '^version = "' fastapi_profiler/rustcore/Cargo.toml | cut -d '"' -f2)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Check if version exists on PyPI
        id: check-pypi
        shell: bash
        run: |
          pip install packaging requests
          
          PACKAGE_NAME="fastapi-profiler-rust"
          CURRENT_VERSION="${{ steps.get-version.outputs.version }}"
          
          echo "Checking if $PACKAGE_NAME==$CURRENT_VERSION exists on PyPI..."
          
          # Check if the version exists on PyPI
          RESPONSE=$(python -c "
          import requests
          import json
          from packaging import version
          
          package = '$PACKAGE_NAME'
          current_version = '$CURRENT_VERSION'
          
          try:
              response = requests.get(f'https://pypi.org/pypi/{package}/json')
              response.raise_for_status()
              data = response.json()
              versions = list(data['releases'].keys())
              
              exists = current_version in versions
              print(json.dumps({'exists': exists}))
          except Exception as e:
              print(json.dumps({'exists': False, 'error': str(e)}))
          ")
          
          EXISTS=$(echo $RESPONSE | python -c "import sys, json; print(json.load(sys.stdin)['exists'])")
          
          if [ "$EXISTS" = "True" ]; then
            echo "Version $CURRENT_VERSION already exists on PyPI, will not publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $CURRENT_VERSION does not exist on PyPI, will publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Maybe bump version
        id: maybe-bump-version
        shell: bash
        run: |
          CURRENT_VERSION=${{ steps.get-version.outputs.version }}
          SHOULD_PUBLISH=${{ steps.check-pypi.outputs.should_publish }}
          
          if [ "$SHOULD_PUBLISH" = "true" ]; then
            echo "Publishing current version: $CURRENT_VERSION"
            echo "bumped_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            # Calculate next version
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
            NEXT_PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
            
            echo "Current version already on PyPI, bumping to: $NEXT_VERSION"
            echo "bumped_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
            
            # Apply version bump
            python scripts/sync_versions.py $NEXT_VERSION
            
            # Commit changes
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "chore: bump version to $NEXT_VERSION [skip ci]"
            git push
          fi

  build-rust:
    needs: [determine-version]
    # Only proceed if we should publish or if workflow was manually triggered
    if: ${{ needs.determine-version.outputs.should_publish == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0
      - name: Fetch latest commit
        run: |
          git fetch origin main
          git reset --hard origin/main
          echo "Current version: $(grep '^version = "' fastapi_profiler/rustcore/Cargo.toml | cut -d '"' -f2)"
      - name: Verify versions
        run: |
          echo "Cargo.toml: $(grep '^version = "' fastapi_profiler/rustcore/Cargo.toml)"
          echo "setup.py: $(grep 'version=' fastapi_profiler/rustcore/setup.py)"
          echo "PyPI check version: ${{ needs.determine-version.outputs.bumped_version }}"
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install maturin
        run: pip install maturin

      - name: Verify version
        shell: bash
        run: |
          CARGO_VERSION=$(grep '^version = "' fastapi_profiler/rustcore/Cargo.toml | cut -d '"' -f2)
          echo "Building Rust core version: $CARGO_VERSION"
          if [ "$CARGO_VERSION" != "${{ needs.determine-version.outputs.bumped_version }}" ]; then
            echo "Error: Version mismatch between job (${{ needs.determine-version.outputs.bumped_version }}) and Cargo.toml ($CARGO_VERSION)"
            exit 1
          fi

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} --out dist --interpreter python${{ matrix.python-version }}
          manylinux: manylinux2014
          working-directory: fastapi_profiler/rustcore

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: rust-wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: fastapi_profiler/rustcore/dist/*.whl
          retention-days: 7

  test:
    needs: [determine-version, build-rust]
    # Only proceed if we should publish or if workflow was manually triggered
    if: ${{ needs.determine-version.outputs.should_publish == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main  # Ensure we have the latest changes

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pip install poetry==1.5.1

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: ./wheels
          merge-multiple: true

      - name: Install local wheel
        shell: bash
        run: |
          # Find the appropriate wheel for this platform and Python version
          PY_VERSION=$(python -c 'import sys; print(f"{sys.version_info.major}{sys.version_info.minor}")')

          if [ "$RUNNER_OS" == "Windows" ]; then
            WHEEL_PATH=$(find ./wheels -name "*-cp${PY_VERSION}-*.whl" | findstr $(echo $PROCESSOR_ARCHITECTURE | tr '[:upper:]' '[:lower:]') || echo "")
          else
            WHEEL_PATH=$(find ./wheels -name "*-cp${PY_VERSION}-*.whl" | grep -i $(uname -m) || echo "")
          fi

          if [ -n "$WHEEL_PATH" ]; then
            echo "Installing local wheel: $WHEEL_PATH"
            pip install --force-reinstall "$WHEEL_PATH"
          else
            echo "No matching wheel found, falling back to PyPI"
            BUMPED_VERSION="${{ needs.determine-version.outputs.bumped_version }}"
            pip install --no-cache-dir fastapi-profiler-rust==${BUMPED_VERSION}
          fi

          # Verify installed version
          if [ "$RUNNER_OS" == "Windows" ]; then
            pip list | findstr fastapi-profiler-rust
          else
            pip list | grep fastapi-profiler-rust
          fi

      - name: Run tests
        run: |
          poetry config virtualenvs.create false
          poetry install --with dev --extras all
          poetry run pytest

  publish-to-pypi:
    needs: [determine-version, build-rust, test]
    if: ${{ needs.determine-version.outputs.should_publish == 'true' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main  # Ensure we have the latest changes

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: ./wheels
          merge-multiple: true

      - name: List downloaded wheel files
        run: |
          echo "âœ… Downloaded wheel files:"
          find ./wheels -name "*.whl"


      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: ./wheels
          merge-multiple: true

      - name: Create dist directory
        run: |
          mkdir -p dist
          cp ./wheels/*.whl dist/
          echo "Contents of dist directory:"
          ls -la dist/

      - name: Publish Rust core
        working-directory: fastapi_profiler/rustcore
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          # Verify token availability (debug safely)
          echo "Token starts with: ${PYPI_TOKEN:0:6}"
          pip install twine
          # Upload wheels
          for wheel in ../../dist/*.whl; do
            twine upload \
              --verbose \
              --repository-url https://upload.pypi.org/legacy/ \
              --username __token__ \
              --password "$PYPI_TOKEN" \
              --skip-existing \
              "$wheel"
          done
